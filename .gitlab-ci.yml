stages:
  - build
  - image
  - release

include:
  - component: gitlab.com/to-be-continuous/renovate/gitlab-ci-renovate@1.2.0

variables:
  AWS_DEFAULT_REGION: ap-northeast-1
  ECR_REGISTRY: public.ecr.aws/e6v1e3g2
  SERVER_REPOSITORY: h3poteto/livecamera-server
  FRONTEND_REPOSITORY: h3poteto/livecamera-frontend
  IMAGE_TAG: $CI_COMMIT_SHA
  AWS_ROLE_ARN: arn:aws:iam::564677439943:role/gitlab-ci-ecr

build-server:
  stage: build
  image: rust:latest
  only:
    - merge_requests
  script:
    - cd server
    - cargo build --verbose
    - cargo test --verbose

build-frontend:
  stage: build
  image: node:22
  only:
    - merge_requests
  script:
    - cd frontend
    - npm install
    - npm run build
    - npm run typecheck

image-server:
  stage: image
  image: docker:latest
  only:
    - merge_requests
    - master
  services:
    - docker:dind
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  before_script:
    - apk add --no-cache curl aws-cli
    - >
      aws_sts_output=$(aws sts assume-role-with-web-identity
      --role-arn ${AWS_ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text)
    - export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $aws_sts_output)
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    - cd server
    - docker build -t $ECR_REGISTRY/$SERVER_REPOSITORY:$IMAGE_TAG .
    - docker tag $ECR_REGISTRY/$SERVER_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$SERVER_REPOSITORY:latest
    - |
      if [ "$CI_COMMIT_BRANCH" = "master" ]; then
        docker push $ECR_REGISTRY/$SERVER_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$SERVER_REPOSITORY:latest
      else
        echo "Skipping push"
      fi

image-frontend:
  stage: image
  image: docker:latest
  only:
    - merge_requests
    - master
  services:
    - docker:dind
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  before_script:
    - apk add --no-cache curl aws-cli
    - >
      aws_sts_output=$(aws sts assume-role-with-web-identity
      --role-arn ${AWS_ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text)
    - export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" $aws_sts_output)
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
  script:
    - cd frontend
    - docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY:$IMAGE_TAG .
    - docker tag $ECR_REGISTRY/$FRONTEND_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest
    - |
      if [ "$CI_COMMIT_BRANCH" = "master" ]; then
        docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY:latest
      else
        echo "Skipping push"
      fi

pull_request:
  stage: release
  image: ubuntu:latest
  only:
    - master
  before_script:
    - apt-get update
    - apt-get install -y curl tar git
    - curl -sSLf https://github.com/github/hub/releases/download/v2.14.2/hub-linux-amd64-2.14.2.tgz | tar zxf - --strip-components=1 -C /tmp/ && mv /tmp/bin/hub /usr/local/bin/hub
    - hub --version
    - curl -sSLf https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz | tar zxf - -C /tmp/ && mv /tmp/kustomize /usr/local/bin/kustomize
    - kustomize version
  script:
    - |
      git config --global user.name h3poteto
      git config --global user.email h3.poteto@gmail.com
    - git clone https://h3poteto:${GITHUB_TOKEN}@github.com/h3poteto/k8s-services.git
    - cd k8s-services
    - git init
    - git checkout -b update-livecamera-image-${IMAGE_TAG}
    - cd raspberry/services/livecamera
    - kustomize edit set image "livecamera-server=${ECR_REGISTRY}/${SERVER_REPOSITORY}:${IMAGE_TAG}"
    - kustomize edit set image "livecamera-frontend=${ECR_REGISTRY}/${FRONTEND_REPOSITORY}:${IMAGE_TAG}"
    - git add .
    - git commit -m "Update docker image for livecamera to ${IMAGE_TAG}"
    - git push --set-upstream origin update-livecamera-image-${IMAGE_TAG}
    - hub pull-request -m "[Image update] livecamera ${IMAGE_TAG}"
